// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Emotion from "emotion";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Css_Types$MyBlog from "./Css_Types.bs.js";
import * as Css_Colors$MyBlog from "./Css_Colors.bs.js";

function mergeStyles(stylenames) {
  return Emotion.cx($$Array.of_list(stylenames));
}

function ruleToDict(dict, rule) {
  switch (rule.tag | 0) {
    case /* D */0 :
        var value = rule[1];
        var name = rule[0];
        if (name === "content") {
          var match = value === "";
          dict[name] = match ? "\"\"" : value;
        } else {
          dict[name] = value;
        }
        break;
    case /* S */1 :
        dict[rule[0]] = makeJson(rule[1]);
        break;
    case /* PseudoClass */2 :
        dict[":" + rule[0]] = makeJson(rule[1]);
        break;
    case /* PseudoClassParam */3 :
        dict[":" + (rule[0] + ("(" + (rule[1] + ")")))] = makeJson(rule[2]);
        break;
    
  }
  return dict;
}

function makeJson(rules) {
  return Belt_List.reduce(rules, { }, ruleToDict);
}

function make(rules) {
  return Emotion.css(makeJson(rules));
}

function join(strings, separator) {
  var _strings = strings;
  var _acc = "";
  while(true) {
    var acc = _acc;
    var strings$1 = _strings;
    if (strings$1) {
      var xs = strings$1[1];
      var x = strings$1[0];
      if (xs) {
        _acc = acc + (x + separator);
        _strings = xs;
        continue ;
      } else {
        return acc + x;
      }
    } else {
      return acc;
    }
  };
}

function string_of_percent(p) {
  return Css_Types$MyBlog.Percentage.toString(p);
}

function string_of_alpha(param) {
  if (param[0] >= 5496390) {
    return param[1].toString();
  } else {
    return param[1].toString() + "%";
  }
}

function string_of_stops(stops) {
  return join(Belt_List.map(stops, (function (param) {
                    return Css_Types$MyBlog.Color.toString(param[1]) + (" " + Css_Types$MyBlog.Length.toString(param[0]));
                  })), ", ");
}

function string_of_background(bg) {
  if (typeof bg === "number") {
    if (bg !== 292050538) {
      if (bg >= 582626130) {
        return "transparent";
      } else {
        return "none";
      }
    } else {
      return "currentColor";
    }
  } else {
    var variant = bg[0];
    if (variant >= 5197569) {
      if (variant !== 5692173) {
        if (variant >= 119548911) {
          if (variant >= 616379637) {
            var match = bg[1];
            return "linear-gradient(" + (Css_Types$MyBlog.Angle.toString(match[0]) + (", " + (string_of_stops(match[1]) + ")")));
          } else {
            return "radial-gradient(" + (string_of_stops(bg[1]) + ")");
          }
        } else if (variant >= 5843823) {
          return "url(" + (bg[1] + ")");
        } else {
          var match$1 = bg[1];
          var h = match$1[0];
          var s = match$1[1];
          var l = match$1[2];
          return "hsl(" + (Css_Types$MyBlog.Angle.toString(h) + (", " + (string_of_percent(s) + (", " + (string_of_percent(l) + ")")))));
        }
      } else {
        var match$2 = bg[1];
        return "rgb(" + (match$2[0].toString() + (", " + (match$2[1].toString() + (", " + (match$2[2].toString() + ")")))));
      }
    } else if (variant !== -878128972) {
      if (variant >= -160280644) {
        if (variant >= 5194459) {
          return "#" + bg[1];
        } else {
          var match$3 = bg[1];
          return "repeating-linear-gradient(" + (Css_Types$MyBlog.Angle.toString(match$3[0]) + (", " + (string_of_stops(match$3[1]) + ")")));
        }
      } else if (variant >= -657111370) {
        return "repeating-radial-gradient(" + (string_of_stops(bg[1]) + ")");
      } else {
        var match$4 = bg[1];
        var h$1 = match$4[0];
        var s$1 = match$4[1];
        var l$1 = match$4[2];
        var a = match$4[3];
        return "hsla(" + (Css_Types$MyBlog.Angle.toString(h$1) + (", " + (string_of_percent(s$1) + (", " + (string_of_percent(l$1) + (", " + (string_of_alpha(a) + ")")))))));
      }
    } else {
      var match$5 = bg[1];
      return "rgba(" + (match$5[0].toString() + (", " + (match$5[1].toString() + (", " + (match$5[2].toString() + (", " + (match$5[3].toString() + ")")))))));
    }
  }
}

var cache = Emotion.cache;

function $$global(selector, rules) {
  Emotion.injectGlobal(Js_dict.fromList(/* :: */[
            /* tuple */[
              selector,
              makeJson(rules)
            ],
            /* [] */0
          ]));
  return /* () */0;
}

function insertRule(raw) {
  Emotion.injectGlobal(raw);
  return /* () */0;
}

function keyframes(frames) {
  var addStop = function (dict, param) {
    dict[param[0].toString() + "%"] = makeJson(param[1]);
    return dict;
  };
  return Emotion.keyframes(List.fold_left(addStop, { }, frames));
}

function important(v) {
  if (v.tag) {
    return v;
  } else {
    return /* D */Block.__(0, [
              v[0],
              v[1] + " !important"
            ]);
  }
}

function label(label$1) {
  return /* D */Block.__(0, [
            "label",
            label$1
          ]);
}

function alignContent(x) {
  return /* D */Block.__(0, [
            "alignContent",
            x >= 287825029 ? (
                x !== 516682146 ? (
                    x >= 662439529 ? (
                        x !== 812216871 ? Css_Types$MyBlog.AlignContent.toString(x) : Css_Types$MyBlog.NormalAlignment.toString(x)
                      ) : (
                        x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BaselineAlignment.toString(x)
                      )
                  ) : Css_Types$MyBlog.DistributedAlignment.toString(x)
              ) : (
                x !== -1016061555 ? (
                    x >= -485895757 ? (
                        x >= 67859554 ? Css_Types$MyBlog.AlignContent.toString(x) : Css_Types$MyBlog.DistributedAlignment.toString(x)
                      ) : (
                        x >= -1021944795 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.AlignContent.toString(x)
                      )
                  ) : Css_Types$MyBlog.DistributedAlignment.toString(x)
              )
          ]);
}

function alignItems(x) {
  return /* D */Block.__(0, [
            "alignItems",
            x >= 287825029 ? (
                x >= 662439529 ? (
                    x !== 812216871 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.AlignItems.toString(x)
                  ) : (
                    x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BaselineAlignment.toString(x)
                  )
              ) : (
                x >= -379319332 ? (
                    x !== -162316795 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.AlignItems.toString(x)
                  ) : (
                    x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.PositionalAlignment.toString(x)
                  )
              )
          ]);
}

function alignSelf(x) {
  return /* D */Block.__(0, [
            "alignSelf",
            x >= 287825029 ? (
                x >= 662439529 ? (
                    x !== 812216871 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.AlignSelf.toString(x)
                  ) : (
                    x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BaselineAlignment.toString(x)
                  )
              ) : (
                x >= -878767996 ? (
                    x >= -379319332 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                  ) : (
                    x >= -1021944796 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.AlignSelf.toString(x)
                  )
              )
          ]);
}

function animationDelay(x) {
  return /* D */Block.__(0, [
            "animationDelay",
            x.toString() + "ms"
          ]);
}

function animationDirection(x) {
  return /* D */Block.__(0, [
            "animationDirection",
            Css_Types$MyBlog.AnimationDirection.toString(x)
          ]);
}

function animationDuration(x) {
  return /* D */Block.__(0, [
            "animationDuration",
            x.toString() + "ms"
          ]);
}

function animationFillMode(x) {
  return /* D */Block.__(0, [
            "animationFillMode",
            Css_Types$MyBlog.AnimationFillMode.toString(x)
          ]);
}

function animationIterationCount(x) {
  return /* D */Block.__(0, [
            "animationIterationCount",
            Css_Types$MyBlog.AnimationIterationCount.toString(x)
          ]);
}

function animationPlayState(x) {
  return /* D */Block.__(0, [
            "animationPlayState",
            Css_Types$MyBlog.AnimationPlayState.toString(x)
          ]);
}

function animationTimingFunction(x) {
  return /* D */Block.__(0, [
            "animationTimingFunction",
            Css_Types$MyBlog.TimingFunction.toString(x)
          ]);
}

function backfaceVisibility(x) {
  return /* D */Block.__(0, [
            "backfaceVisibility",
            x !== -862584982 && x !== 589592690 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackfaceVisibility.toString(x)
          ]);
}

function backgroundAttachment(x) {
  return /* D */Block.__(0, [
            "backgroundAttachment",
            x >= -118437525 ? (
                x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackgroundAttachment.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackgroundAttachment.toString(x)
              )
          ]);
}

function backgroundColor(x) {
  return /* D */Block.__(0, [
            "backgroundColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function backgroundClip(x) {
  return /* D */Block.__(0, [
            "backgroundClip",
            x >= 9307263 ? (
                x !== 653193961 ? Css_Types$MyBlog.BackgroundClip.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackgroundClip.toString(x)
              )
          ]);
}

function backgroundImage(x) {
  return /* D */Block.__(0, [
            "backgroundImage",
            typeof x === "number" ? Css_Types$MyBlog.BackgroundImage.toString(x) : (
                x[0] !== 5843823 ? Css_Types$MyBlog.Gradient.toString(x) : Css_Types$MyBlog.Url.toString(x)
              )
          ]);
}

function backgroundOrigin(x) {
  return /* D */Block.__(0, [
            "backgroundOrigin",
            x >= 9307263 ? (
                x !== 653193961 ? Css_Types$MyBlog.BackgroundOrigin.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackgroundOrigin.toString(x)
              )
          ]);
}

function backgroundPosition(x, y) {
  return /* D */Block.__(0, [
            "backgroundPosition",
            Css_Types$MyBlog.Length.toString(x) + (" " + Css_Types$MyBlog.Length.toString(y))
          ]);
}

function backgroundRepeat(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x >= -312084402 ? (
        x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackgroundRepeat.toString(x)
      ) : (
        x !== -695430532 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BackgroundRepeat.toString(x)
      );
  } else {
    var match = x[1];
    tmp = Css_Types$MyBlog.BackgroundRepeat.toString(match[0]) + (" " + Css_Types$MyBlog.BackgroundRepeat.toString(match[1]));
  }
  return /* D */Block.__(0, [
            "backgroundRepeat",
            tmp
          ]);
}

function borderBottomColor(x) {
  return /* D */Block.__(0, [
            "borderBottomColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function borderBottomLeftRadius(x) {
  return /* D */Block.__(0, [
            "borderBottomLeftRadius",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderBottomRightRadius(x) {
  return /* D */Block.__(0, [
            "borderBottomRightRadius",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderBottomWidth(x) {
  return /* D */Block.__(0, [
            "borderBottomWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderCollapse(x) {
  return /* D */Block.__(0, [
            "borderCollapse",
            x !== 119283555 && x >= -996847250 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BorderCollapse.toString(x)
          ]);
}

function borderColor(x) {
  return /* D */Block.__(0, [
            "borderColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function borderLeftColor(x) {
  return /* D */Block.__(0, [
            "borderLeftColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function borderLeftWidth(x) {
  return /* D */Block.__(0, [
            "borderLeftWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderSpacing(x) {
  return /* D */Block.__(0, [
            "borderSpacing",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderRadius(x) {
  return /* D */Block.__(0, [
            "borderRadius",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderRightColor(x) {
  return /* D */Block.__(0, [
            "borderRightColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function borderRightWidth(x) {
  return /* D */Block.__(0, [
            "borderRightWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderTopColor(x) {
  return /* D */Block.__(0, [
            "borderTopColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function borderTopLeftRadius(x) {
  return /* D */Block.__(0, [
            "borderTopLeftRadius",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderTopRightRadius(x) {
  return /* D */Block.__(0, [
            "borderTopRightRadius",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderTopWidth(x) {
  return /* D */Block.__(0, [
            "borderTopWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function borderWidth(x) {
  return /* D */Block.__(0, [
            "borderWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function bottom(x) {
  return /* D */Block.__(0, [
            "bottom",
            typeof x === "number" && x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function boxSizing(x) {
  return /* D */Block.__(0, [
            "boxSizing",
            x !== 9307263 && x >= -1008848301 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.BoxSizing.toString(x)
          ]);
}

function clear(x) {
  return /* D */Block.__(0, [
            "clear",
            x >= -379319332 ? (
                x !== 653193961 ? Css_Types$MyBlog.Clear.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Clear.toString(x)
              )
          ]);
}

function clipPath(x) {
  return /* D */Block.__(0, [
            "clipPath",
            typeof x === "number" ? (
                x !== -922086728 ? (
                    x >= -298658179 ? (
                        x !== 653193961 ? Css_Types$MyBlog.GeometyBox.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                      ) : (
                        x >= -1008848301 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.GeometyBox.toString(x)
                      )
                  ) : Css_Types$MyBlog.ClipPath.toString(x)
              ) : Css_Types$MyBlog.Url.toString(x)
          ]);
}

function color(x) {
  return /* D */Block.__(0, [
            "color",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function columnCount(x) {
  return /* D */Block.__(0, [
            "columnCount",
            typeof x === "number" && x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.ColumnCount.toString(x)
          ]);
}

function contentRule(x) {
  return /* D */Block.__(0, [
            "content",
            "\"" + (String(x) + "\"")
          ]);
}

function cursor(x) {
  return /* D */Block.__(0, [
            "cursor",
            Css_Types$MyBlog.Cursor.toString(x)
          ]);
}

function direction(x) {
  return /* D */Block.__(0, [
            "direction",
            x >= 5396714 && x < 653193961 ? Css_Types$MyBlog.Direction.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
          ]);
}

function display(x) {
  return /* D */Block.__(0, [
            "display",
            x >= 97122692 ? (
                x < 653193961 ? (
                    x !== 182695950 ? (
                        x !== 423610969 ? (
                            x >= 632591505 ? Css_Types$MyBlog.DisplayListItem.toString(x) : Css_Types$MyBlog.DisplayInternal.toString(x)
                          ) : Css_Types$MyBlog.DisplayOutside.toString(x)
                      ) : Css_Types$MyBlog.DisplayInside.toString(x)
                  ) : (
                    x >= 793912528 ? (
                        x !== 888960333 ? Css_Types$MyBlog.DisplayInternal.toString(x) : Css_Types$MyBlog.DisplayOutside.toString(x)
                      ) : (
                        x >= 790889754 ? Css_Types$MyBlog.DisplayBox.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                      )
                  )
              ) : (
                x >= -854050059 ? (
                    x !== -601204732 ? (
                        x >= -245903344 ? (
                            x >= -147785676 ? Css_Types$MyBlog.DisplayLegacy.toString(x) : Css_Types$MyBlog.DisplayOutside.toString(x)
                          ) : (
                            x >= -843129172 ? Css_Types$MyBlog.DisplayInternal.toString(x) : Css_Types$MyBlog.DisplayLegacy.toString(x)
                          )
                      ) : Css_Types$MyBlog.Cascading.toString(x)
                  ) : (
                    x >= -922086728 ? (
                        x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.DisplayBox.toString(x)
                      ) : (
                        x >= -1010954439 ? Css_Types$MyBlog.DisplayInside.toString(x) : Css_Types$MyBlog.DisplayInternal.toString(x)
                      )
                  )
              )
          ]);
}

function flex(x) {
  return /* D */Block.__(0, [
            "flex",
            typeof x === "number" ? Css_Types$MyBlog.Flex.toString(x) : x[1].toString()
          ]);
}

function flexDirection(x) {
  return /* D */Block.__(0, [
            "flexDirection",
            x >= 5693978 ? (
                x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.FlexDirection.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.FlexDirection.toString(x)
              )
          ]);
}

function flexGrow(x) {
  return /* D */Block.__(0, [
            "flexGrow",
            x.toString()
          ]);
}

function flexShrink(x) {
  return /* D */Block.__(0, [
            "flexShrink",
            x.toString()
          ]);
}

function flexWrap(x) {
  return /* D */Block.__(0, [
            "flexWrap",
            x >= -463121288 ? (
                x !== 653193961 ? Css_Types$MyBlog.FlexWrap.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x !== -822134326 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.FlexWrap.toString(x)
              )
          ]);
}

function $$float(x) {
  return /* D */Block.__(0, [
            "float",
            x >= -379319332 ? (
                x !== 653193961 ? Css_Types$MyBlog.Float.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Float.toString(x)
              )
          ]);
}

function fontFamily(x) {
  return /* D */Block.__(0, [
            "fontFamily",
            x
          ]);
}

function fontSize(x) {
  return /* D */Block.__(0, [
            "fontSize",
            typeof x === "number" && x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function fontStyle(x) {
  return /* D */Block.__(0, [
            "fontStyle",
            x !== 107228912 && x < 734792881 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.FontStyle.toString(x)
          ]);
}

function fontVariant(x) {
  return /* D */Block.__(0, [
            "fontVariant",
            x !== -386684792 && x < 812216871 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.FontVariant.toString(x)
          ]);
}

function fontWeight(x) {
  return /* D */Block.__(0, [
            "fontWeight",
            typeof x === "number" && !(x !== -878767996 && x !== -601204732 && x !== 653193961) ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.FontWeight.toString(x)
          ]);
}

function gridAutoFlow(x) {
  return /* D */Block.__(0, [
            "gridAutoFlow",
            x >= -227605271 ? (
                x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.GridAutoFlow.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.GridAutoFlow.toString(x)
              )
          ]);
}

function gridColumn(start, end$prime) {
  return /* D */Block.__(0, [
            "gridColumn",
            start.toString() + (" / " + end$prime.toString())
          ]);
}

function gridColumnGap(x) {
  return /* D */Block.__(0, [
            "gridColumnGap",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= 812216871 ? Css_Types$MyBlog.GridColumnGap.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function gridColumnStart(n) {
  return /* D */Block.__(0, [
            "gridColumnStart",
            n.toString()
          ]);
}

function gridColumnEnd(n) {
  return /* D */Block.__(0, [
            "gridColumnEnd",
            n.toString()
          ]);
}

function gridRow(start, end$prime) {
  return /* D */Block.__(0, [
            "gridRow",
            start.toString() + (" / " + end$prime.toString())
          ]);
}

function gridGap(x) {
  return /* D */Block.__(0, [
            "gridGap",
            typeof x === "number" ? (
                x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function gridRowGap(x) {
  return /* D */Block.__(0, [
            "gridRowGap",
            typeof x === "number" ? (
                x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function gridRowEnd(n) {
  return /* D */Block.__(0, [
            "gridRowEnd",
            n.toString()
          ]);
}

function gridRowStart(n) {
  return /* D */Block.__(0, [
            "gridRowStart",
            n.toString()
          ]);
}

function height(x) {
  return /* D */Block.__(0, [
            "height",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= -1065951376 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Height.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function justifyContent(x) {
  return /* D */Block.__(0, [
            "justifyContent",
            x >= -162316795 ? (
                x >= 516682146 ? (
                    x >= 662439529 ? (
                        x !== 812216871 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.NormalAlignment.toString(x)
                      ) : (
                        x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.DistributedAlignment.toString(x)
                      )
                  ) : (
                    x >= 51834799 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.DistributedAlignment.toString(x)
                  )
              ) : (
                x !== -1016061555 ? (
                    x >= -485895757 ? (
                        x >= -379319332 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.DistributedAlignment.toString(x)
                      ) : (
                        x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.PositionalAlignment.toString(x)
                      )
                  ) : Css_Types$MyBlog.DistributedAlignment.toString(x)
              )
          ]);
}

function left(x) {
  return /* D */Block.__(0, [
            "left",
            typeof x === "number" && x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function letterSpacing(x) {
  return /* D */Block.__(0, [
            "letterSpacing",
            typeof x === "number" && x !== -789508312 ? (
                x >= 812216871 ? Css_Types$MyBlog.LetterSpacing.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function lineHeight(x) {
  return /* D */Block.__(0, [
            "lineHeight",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= 812216871 ? Css_Types$MyBlog.LineHeight.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== 4845682 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.LineHeight.toString(x)
              )
          ]);
}

function listStyle(style, position, image) {
  return /* D */Block.__(0, [
            "listStyle",
            Css_Types$MyBlog.ListStyleType.toString(style) + (" " + (Css_Types$MyBlog.ListStylePosition.toString(position) + (" " + (
                    typeof image === "number" ? Css_Types$MyBlog.ListStyleImage.toString(image) : Css_Types$MyBlog.Url.toString(image)
                  ))))
          ]);
}

function listStyleImage(x) {
  return /* D */Block.__(0, [
            "listStyleImage",
            typeof x === "number" ? (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.ListStyleImage.toString(x)
              ) : Css_Types$MyBlog.Url.toString(x)
          ]);
}

function listStyleType(x) {
  return /* D */Block.__(0, [
            "listStyleType",
            x !== -878767996 && x !== -601204732 && x !== 653193961 ? Css_Types$MyBlog.ListStyleType.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
          ]);
}

function listStylePosition(x) {
  return /* D */Block.__(0, [
            "listStylePosition",
            x >= -430011099 && x < 653193961 ? Css_Types$MyBlog.ListStylePosition.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
          ]);
}

function marginToString(x) {
  if (typeof x === "number" && x < -789508312) {
    return Css_Types$MyBlog.Margin.toString(x);
  } else {
    return Css_Types$MyBlog.Length.toString(x);
  }
}

function margin(x) {
  return /* D */Block.__(0, [
            "margin",
            marginToString(x)
          ]);
}

function margin2(v, h) {
  return /* D */Block.__(0, [
            "margin",
            marginToString(v) + (" " + marginToString(h))
          ]);
}

function margin3(top, h, bottom) {
  return /* D */Block.__(0, [
            "margin",
            marginToString(top) + (" " + (marginToString(h) + (" " + marginToString(bottom))))
          ]);
}

function margin4(top, right, bottom, left) {
  return /* D */Block.__(0, [
            "margin",
            marginToString(top) + (" " + (marginToString(right) + (" " + (marginToString(bottom) + (" " + marginToString(left))))))
          ]);
}

function marginLeft(x) {
  return /* D */Block.__(0, [
            "marginLeft",
            marginToString(x)
          ]);
}

function marginRight(x) {
  return /* D */Block.__(0, [
            "marginRight",
            marginToString(x)
          ]);
}

function marginTop(x) {
  return /* D */Block.__(0, [
            "marginTop",
            marginToString(x)
          ]);
}

function marginBottom(x) {
  return /* D */Block.__(0, [
            "marginBottom",
            marginToString(x)
          ]);
}

function maxHeight(x) {
  return /* D */Block.__(0, [
            "maxHeight",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= -922086727 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.MaxHeight.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function maxWidth(x) {
  return /* D */Block.__(0, [
            "maxWidth",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= -922086727 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.MaxWidth.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function minHeight(x) {
  return /* D */Block.__(0, [
            "minHeight",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= -1065951376 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Height.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function minWidth(x) {
  return /* D */Block.__(0, [
            "minWidth",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x !== -195805336 && x >= -1065951376 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Width.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function objectFit(x) {
  return /* D */Block.__(0, [
            "objectFit",
            x >= 427065300 ? (
                x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.ObjectFit.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.ObjectFit.toString(x)
              )
          ]);
}

function opacity(x) {
  return /* D */Block.__(0, [
            "opacity",
            x.toString()
          ]);
}

function outline(size, style, color) {
  return /* D */Block.__(0, [
            "outline",
            Css_Types$MyBlog.Length.toString(size) + (" " + (Css_Types$MyBlog.OutlineStyle.toString(style) + (" " + Css_Types$MyBlog.Color.toString(color))))
          ]);
}

function outlineColor(x) {
  return /* D */Block.__(0, [
            "outlineColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function outlineOffset(x) {
  return /* D */Block.__(0, [
            "outlineOffset",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function outlineStyle(x) {
  return /* D */Block.__(0, [
            "outlineStyle",
            Css_Types$MyBlog.OutlineStyle.toString(x)
          ]);
}

function outlineWidth(x) {
  return /* D */Block.__(0, [
            "outlineWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function overflow(x) {
  return /* D */Block.__(0, [
            "overflow",
            Css_Types$MyBlog.Overflow.toString(x)
          ]);
}

function overflowX(x) {
  return /* D */Block.__(0, [
            "overflowX",
            Css_Types$MyBlog.Overflow.toString(x)
          ]);
}

function overflowY(x) {
  return /* D */Block.__(0, [
            "overflowY",
            Css_Types$MyBlog.Overflow.toString(x)
          ]);
}

function overflowWrap(x) {
  return /* D */Block.__(0, [
            "overflowWrap",
            x >= 812216871 ? Css_Types$MyBlog.OverflowWrap.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
          ]);
}

function padding(x) {
  return /* D */Block.__(0, [
            "padding",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function padding2(v, h) {
  return /* D */Block.__(0, [
            "padding",
            Css_Types$MyBlog.Length.toString(v) + (" " + Css_Types$MyBlog.Length.toString(h))
          ]);
}

function padding3(top, h, bottom) {
  return /* D */Block.__(0, [
            "padding",
            Css_Types$MyBlog.Length.toString(top) + (" " + (Css_Types$MyBlog.Length.toString(h) + (" " + Css_Types$MyBlog.Length.toString(bottom))))
          ]);
}

function padding4(top, right, bottom, left) {
  return /* D */Block.__(0, [
            "padding",
            Css_Types$MyBlog.Length.toString(top) + (" " + (Css_Types$MyBlog.Length.toString(right) + (" " + (Css_Types$MyBlog.Length.toString(bottom) + (" " + Css_Types$MyBlog.Length.toString(left))))))
          ]);
}

function paddingBottom(x) {
  return /* D */Block.__(0, [
            "paddingBottom",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function paddingLeft(x) {
  return /* D */Block.__(0, [
            "paddingLeft",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function paddingRight(x) {
  return /* D */Block.__(0, [
            "paddingRight",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function paddingTop(x) {
  return /* D */Block.__(0, [
            "paddingTop",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function perspective(x) {
  return /* D */Block.__(0, [
            "perspective",
            typeof x === "number" && x !== -789508312 ? (
                x >= -922086727 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Perspective.toString(x)
              ) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function perspectiveOrigin(x, y) {
  return /* D */Block.__(0, [
            "perspectiveOrigin",
            (
              typeof x === "number" && x < -789508312 ? Css_Types$MyBlog.Perspective.toString(x) : Css_Types$MyBlog.Length.toString(x)
            ) + (" " + (
                typeof y === "number" && y < -789508312 ? Css_Types$MyBlog.Perspective.toString(y) : Css_Types$MyBlog.Length.toString(y)
              ))
          ]);
}

function pointerEvents(x) {
  return /* D */Block.__(0, [
            "pointerEvents",
            x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.PointerEvents.toString(x)
          ]);
}

function position(x) {
  return /* D */Block.__(0, [
            "position",
            x >= 10615156 ? (
                x !== 653193961 ? Css_Types$MyBlog.Position.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Position.toString(x)
              )
          ]);
}

function justifySelf(x) {
  return /* D */Block.__(0, [
            "justifySelf",
            x >= 51834799 ? (
                x !== 287825029 ? (
                    x !== 653193961 ? (
                        x !== 812216871 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.JustifySelf.toString(x)
                      ) : Css_Types$MyBlog.Cascading.toString(x)
                  ) : Css_Types$MyBlog.BaselineAlignment.toString(x)
              ) : (
                x !== -379319332 ? (
                    x >= -878767996 ? (
                        x >= -162316795 ? Css_Types$MyBlog.JustifySelf.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                      ) : (
                        x >= -1021944796 ? Css_Types$MyBlog.PositionalAlignment.toString(x) : Css_Types$MyBlog.JustifySelf.toString(x)
                      )
                  ) : Css_Types$MyBlog.PositionalAlignment.toString(x)
              )
          ]);
}

function resize(x) {
  return /* D */Block.__(0, [
            "resize",
            x >= -367674250 ? (
                x !== 653193961 ? Css_Types$MyBlog.Resize.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Resize.toString(x)
              )
          ]);
}

function right(x) {
  return /* D */Block.__(0, [
            "right",
            typeof x === "number" && x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function tableLayout(x) {
  return /* D */Block.__(0, [
            "tableLayout",
            x !== 10615156 && x >= -1065951376 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TableLayout.toString(x)
          ]);
}

function textAlign(x) {
  return /* D */Block.__(0, [
            "textAlign",
            x >= -379319332 ? (
                x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextAlign.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextAlign.toString(x)
              )
          ]);
}

function textDecorationColor(x) {
  return /* D */Block.__(0, [
            "textDecorationColor",
            typeof x === "number" && !(x >= 292050538 && x < 653193961) ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Color.toString(x)
          ]);
}

function textDecorationLine(x) {
  return /* D */Block.__(0, [
            "textDecorationLine",
            x >= 131142924 ? (
                x !== 653193961 ? Css_Types$MyBlog.TextDecorationLine.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextDecorationLine.toString(x)
              )
          ]);
}

function textDecorationStyle(x) {
  return /* D */Block.__(0, [
            "textDecorationStyle",
            x >= 12956715 ? (
                x !== 653193961 ? Css_Types$MyBlog.TextDecorationStyle.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              ) : (
                x !== -822975027 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextDecorationStyle.toString(x)
              )
          ]);
}

function textIndent(x) {
  return /* D */Block.__(0, [
            "textIndent",
            typeof x === "number" ? (
                x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function textOverflow(x) {
  return /* D */Block.__(0, [
            "textOverflow",
            typeof x === "number" && x !== 166888785 && x >= -1044222255 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextOverflow.toString(x)
          ]);
}

function textTransform(x) {
  return /* D */Block.__(0, [
            "textTransform",
            x >= -509867604 ? (
                x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextTransform.toString(x)
              ) : (
                x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TextTransform.toString(x)
              )
          ]);
}

function top(x) {
  return /* D */Block.__(0, [
            "top",
            typeof x === "number" && x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function transform(x) {
  return /* D */Block.__(0, [
            "transform",
            Css_Types$MyBlog.Transform.toString(x)
          ]);
}

function transforms(x) {
  return /* D */Block.__(0, [
            "transform",
            join(Belt_List.map(x, Css_Types$MyBlog.Transform.toString), " ")
          ]);
}

function transformOrigin(x, y) {
  return /* D */Block.__(0, [
            "transformOrigin",
            Css_Types$MyBlog.Length.toString(x) + (" " + Css_Types$MyBlog.Length.toString(y))
          ]);
}

function transformOrigin3d(x, y, z) {
  return /* D */Block.__(0, [
            "transformOrigin",
            Css_Types$MyBlog.Length.toString(x) + (" " + (Css_Types$MyBlog.Length.toString(y) + (" " + (Css_Types$MyBlog.Length.toString(z) + " "))))
          ]);
}

function unsafe(property, value) {
  return /* D */Block.__(0, [
            property,
            value
          ]);
}

function userSelect(x) {
  return /* D */Block.__(0, [
            "userSelect",
            x !== -878767996 && x !== -601204732 && x < 653193961 ? Css_Types$MyBlog.UserSelect.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
          ]);
}

function verticalAlign(x) {
  return /* D */Block.__(0, [
            "verticalAlign",
            typeof x === "number" ? (
                x !== -866200747 ? (
                    x >= -445061397 ? (
                        x >= 653193961 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.VerticalAlign.toString(x)
                      ) : (
                        x !== -789508312 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Length.toString(x)
                      )
                  ) : Css_Types$MyBlog.VerticalAlign.toString(x)
              ) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function visibility(x) {
  return /* D */Block.__(0, [
            "visibility",
            x >= -601204732 ? (
                x !== 589592690 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Visibility.toString(x)
              ) : (
                x !== -878767996 ? Css_Types$MyBlog.Visibility.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
              )
          ]);
}

function width(x) {
  return /* D */Block.__(0, [
            "width",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x !== -195805336 && x >= -1065951376 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.Width.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function whiteSpace(x) {
  return /* D */Block.__(0, [
            "whiteSpace",
            x !== 653193961 && x >= -601204731 ? Css_Types$MyBlog.WhiteSpace.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
          ]);
}

function wordBreak(x) {
  return /* D */Block.__(0, [
            "wordBreak",
            x !== -323760734 && x < 812216871 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.WordBreak.toString(x)
          ]);
}

function wordSpacing(x) {
  return /* D */Block.__(0, [
            "wordSpacing",
            typeof x === "number" ? (
                x !== -789508312 ? (
                    x >= 812216871 ? Css_Types$MyBlog.WordSpacing.toString(x) : Css_Types$MyBlog.Cascading.toString(x)
                  ) : Css_Types$MyBlog.Length.toString(x)
              ) : (
                x[0] !== -119887163 ? Css_Types$MyBlog.Length.toString(x) : Css_Types$MyBlog.Percentage.toString(x)
              )
          ]);
}

function zIndex(x) {
  return /* D */Block.__(0, [
            "zIndex",
            x.toString()
          ]);
}

function media(query, rules) {
  return /* S */Block.__(1, [
            "@media " + query,
            rules
          ]);
}

function selector(selector$1, rules) {
  return /* S */Block.__(1, [
            selector$1,
            rules
          ]);
}

function active(param) {
  return /* PseudoClass */Block.__(2, [
            "active",
            param
          ]);
}

function checked(param) {
  return /* PseudoClass */Block.__(2, [
            "checked",
            param
          ]);
}

function $$default(param) {
  return /* PseudoClass */Block.__(2, [
            "default",
            param
          ]);
}

function defined(param) {
  return /* PseudoClass */Block.__(2, [
            "defined",
            param
          ]);
}

function disabled(param) {
  return /* PseudoClass */Block.__(2, [
            "disabled",
            param
          ]);
}

function empty(param) {
  return /* PseudoClass */Block.__(2, [
            "empty",
            param
          ]);
}

function enabled(param) {
  return /* PseudoClass */Block.__(2, [
            "enabled",
            param
          ]);
}

function first(param) {
  return /* PseudoClass */Block.__(2, [
            "first",
            param
          ]);
}

function firstChild(param) {
  return /* PseudoClass */Block.__(2, [
            "first-child",
            param
          ]);
}

function firstOfType(param) {
  return /* PseudoClass */Block.__(2, [
            "first-of-type",
            param
          ]);
}

function focus(param) {
  return /* PseudoClass */Block.__(2, [
            "focus",
            param
          ]);
}

function focusWithin(param) {
  return /* PseudoClass */Block.__(2, [
            "focus-within",
            param
          ]);
}

function host(selector, rules) {
  if (selector !== undefined) {
    return /* PseudoClassParam */Block.__(3, [
              "host",
              selector,
              rules
            ]);
  } else {
    return /* PseudoClass */Block.__(2, [
              "host",
              rules
            ]);
  }
}

function hover(param) {
  return /* PseudoClass */Block.__(2, [
            "hover",
            param
          ]);
}

function indeterminate(param) {
  return /* PseudoClass */Block.__(2, [
            "indeterminate",
            param
          ]);
}

function inRange(param) {
  return /* PseudoClass */Block.__(2, [
            "in-range",
            param
          ]);
}

function invalid(param) {
  return /* PseudoClass */Block.__(2, [
            "invalid",
            param
          ]);
}

function lang(code, rules) {
  return /* PseudoClassParam */Block.__(3, [
            "lang",
            code,
            rules
          ]);
}

function lastChild(param) {
  return /* PseudoClass */Block.__(2, [
            "last-child",
            param
          ]);
}

function lastOfType(param) {
  return /* PseudoClass */Block.__(2, [
            "last-of-type",
            param
          ]);
}

function link(param) {
  return /* PseudoClass */Block.__(2, [
            "link",
            param
          ]);
}

function not__(selector, rules) {
  return /* PseudoClassParam */Block.__(3, [
            "not",
            selector,
            rules
          ]);
}

function toString(param) {
  if (typeof param === "number") {
    if (param >= 5542319) {
      return "odd";
    } else {
      return "even";
    }
  } else if (param[0] >= 4846113) {
    var match = param[1];
    return match[0].toString() + ("n+" + match[1].toString());
  } else {
    return param[1].toString() + "n";
  }
}

var Nth = {
  toString: toString
};

function nthChild(x, rules) {
  return /* PseudoClassParam */Block.__(3, [
            "nth-child",
            toString(x),
            rules
          ]);
}

function nthLastChild(x, rules) {
  return /* PseudoClassParam */Block.__(3, [
            "nth-last-child",
            toString(x),
            rules
          ]);
}

function nthLastOfType(x, rules) {
  return /* PseudoClassParam */Block.__(3, [
            "nth-last-of-type",
            toString(x),
            rules
          ]);
}

function nthOfType(x, rules) {
  return /* PseudoClassParam */Block.__(3, [
            "nth-of-type",
            toString(x),
            rules
          ]);
}

function onlyChild(param) {
  return /* PseudoClass */Block.__(2, [
            "only-child",
            param
          ]);
}

function onlyOfType(param) {
  return /* PseudoClass */Block.__(2, [
            "only-of-type",
            param
          ]);
}

function optional(param) {
  return /* PseudoClass */Block.__(2, [
            "optional",
            param
          ]);
}

function outOfRange(param) {
  return /* PseudoClass */Block.__(2, [
            "out-of-range",
            param
          ]);
}

function readOnly(param) {
  return /* PseudoClass */Block.__(2, [
            "read-only",
            param
          ]);
}

function readWrite(param) {
  return /* PseudoClass */Block.__(2, [
            "read-write",
            param
          ]);
}

function required(param) {
  return /* PseudoClass */Block.__(2, [
            "required",
            param
          ]);
}

function root(param) {
  return /* PseudoClass */Block.__(2, [
            "root",
            param
          ]);
}

function scope(param) {
  return /* PseudoClass */Block.__(2, [
            "scope",
            param
          ]);
}

function target(param) {
  return /* PseudoClass */Block.__(2, [
            "target",
            param
          ]);
}

function valid(param) {
  return /* PseudoClass */Block.__(2, [
            "valid",
            param
          ]);
}

function visited(param) {
  return /* PseudoClass */Block.__(2, [
            "visited",
            param
          ]);
}

function after(param) {
  return /* S */Block.__(1, [
            "::after",
            param
          ]);
}

function before(param) {
  return /* S */Block.__(1, [
            "::before",
            param
          ]);
}

function children(param) {
  return /* S */Block.__(1, [
            " > *",
            param
          ]);
}

function directSibling(param) {
  return /* S */Block.__(1, [
            " + ",
            param
          ]);
}

function noContent(param) {
  return /* S */Block.__(1, [
            ":empty",
            param
          ]);
}

function anyLink(param) {
  return /* S */Block.__(1, [
            ":any-link",
            param
          ]);
}

function siblings(param) {
  return /* S */Block.__(1, [
            " ~ ",
            param
          ]);
}

function firstLine(param) {
  return /* S */Block.__(1, [
            "::first-line",
            param
          ]);
}

function firstLetter(param) {
  return /* S */Block.__(1, [
            "::first-letter",
            param
          ]);
}

function selection(param) {
  return /* S */Block.__(1, [
            "::selection",
            param
          ]);
}

function placeholder(param) {
  return /* S */Block.__(1, [
            "::placeholder",
            param
          ]);
}

var initial = Css_Types$MyBlog.Cascading.initial;

var inherit_ = Css_Types$MyBlog.Cascading.inherit_;

var unset = Css_Types$MyBlog.Cascading.unset;

var pct = Css_Types$MyBlog.Percentage.pct;

var ch = Css_Types$MyBlog.Length.ch;

var cm = Css_Types$MyBlog.Length.cm;

var em = Css_Types$MyBlog.Length.em;

var ex = Css_Types$MyBlog.Length.ex;

var mm = Css_Types$MyBlog.Length.mm;

var pt = Css_Types$MyBlog.Length.pt;

var px = Css_Types$MyBlog.Length.px;

var pxFloat = Css_Types$MyBlog.Length.pxFloat;

var rem = Css_Types$MyBlog.Length.rem;

var vh = Css_Types$MyBlog.Length.vh;

var vmin = Css_Types$MyBlog.Length.vmin;

var vmax = Css_Types$MyBlog.Length.vmax;

var zero = Css_Types$MyBlog.Length.zero;

var deg = Css_Types$MyBlog.Angle.deg;

var rad = Css_Types$MyBlog.Angle.rad;

var grad = Css_Types$MyBlog.Angle.grad;

var turn = Css_Types$MyBlog.Angle.turn;

var ltr = Css_Types$MyBlog.Direction.ltr;

var rtl = Css_Types$MyBlog.Direction.rtl;

var absolute = Css_Types$MyBlog.Position.absolute;

var relative = Css_Types$MyBlog.Position.relative;

var $$static = Css_Types$MyBlog.Position.$$static;

var sticky = Css_Types$MyBlog.Position.sticky;

var horizontal = Css_Types$MyBlog.Resize.horizontal;

var vertical = Css_Types$MyBlog.Resize.vertical;

var smallCaps = Css_Types$MyBlog.FontVariant.smallCaps;

var italic = Css_Types$MyBlog.FontStyle.italic;

var oblique = Css_Types$MyBlog.FontStyle.oblique;

var rgb = Css_Types$MyBlog.Color.rgb;

var rgba = Css_Types$MyBlog.Color.rgba;

var hsl = Css_Types$MyBlog.Color.hsl;

var hsla = Css_Types$MyBlog.Color.hsla;

var hex = Css_Types$MyBlog.Color.hex;

var currentColor = Css_Types$MyBlog.Color.currentColor;

var transparent = Css_Types$MyBlog.Color.transparent;

var linear = Css_Types$MyBlog.TimingFunction.linear;

var ease = Css_Types$MyBlog.TimingFunction.ease;

var easeIn = Css_Types$MyBlog.TimingFunction.easeIn;

var easeInOut = Css_Types$MyBlog.TimingFunction.easeInOut;

var easeOut = Css_Types$MyBlog.TimingFunction.easeOut;

var stepStart = Css_Types$MyBlog.TimingFunction.stepStart;

var stepEnd = Css_Types$MyBlog.TimingFunction.stepEnd;

var steps = Css_Types$MyBlog.TimingFunction.steps;

var cubicBezier = Css_Types$MyBlog.TimingFunction.cubicBezier;

var marginBox = Css_Types$MyBlog.GeometyBox.marginBox;

var fillBox = Css_Types$MyBlog.GeometyBox.fillBox;

var strokeBox = Css_Types$MyBlog.GeometyBox.strokeBox;

var viewBox = Css_Types$MyBlog.GeometyBox.viewBox;

var translate = Css_Types$MyBlog.Transform.translate;

var translate3d = Css_Types$MyBlog.Transform.translate3d;

var translateX = Css_Types$MyBlog.Transform.translateX;

var translateY = Css_Types$MyBlog.Transform.translateY;

var translateZ = Css_Types$MyBlog.Transform.translateZ;

var scaleX = Css_Types$MyBlog.Transform.scaleX;

var scaleY = Css_Types$MyBlog.Transform.scaleY;

var scaleZ = Css_Types$MyBlog.Transform.scaleZ;

var rotateX = Css_Types$MyBlog.Transform.rotateX;

var rotateY = Css_Types$MyBlog.Transform.rotateY;

var rotateZ = Css_Types$MyBlog.Transform.rotateZ;

var scale = Css_Types$MyBlog.Transform.scale;

var scale3d = Css_Types$MyBlog.Transform.scale3d;

var skew = Css_Types$MyBlog.Transform.skew;

var skewX = Css_Types$MyBlog.Transform.skewX;

var skewY = Css_Types$MyBlog.Transform.skewY;

var thin = Css_Types$MyBlog.FontWeight.thin;

var extraLight = Css_Types$MyBlog.FontWeight.extraLight;

var light = Css_Types$MyBlog.FontWeight.light;

var medium = Css_Types$MyBlog.FontWeight.medium;

var semiBold = Css_Types$MyBlog.FontWeight.semiBold;

var bold = Css_Types$MyBlog.FontWeight.bold;

var extraBold = Css_Types$MyBlog.FontWeight.extraBold;

var lighter = Css_Types$MyBlog.FontWeight.lighter;

var bolder = Css_Types$MyBlog.FontWeight.bolder;

var linearGradient = Css_Types$MyBlog.Gradient.linearGradient;

var repeatingLinearGradient = Css_Types$MyBlog.Gradient.repeatingLinearGradient;

var radialGradient = Css_Types$MyBlog.Gradient.radialGradient;

var repeatingRadialGradient = Css_Types$MyBlog.Gradient.repeatingRadialGradient;

function vw(x) {
  return /* `vw */[
          26433,
          x
        ];
}

function fr(x) {
  return /* `fr */[
          22860,
          x
        ];
}

function $neg(a, b) {
  return /* `calc */[
          -1044768619,
          /* tuple */[
            /* sub */5745024,
            a,
            b
          ]
        ];
}

function $plus(a, b) {
  return /* `calc */[
          -1044768619,
          /* tuple */[
            /* add */4846113,
            a,
            b
          ]
        ];
}

var Calc = {
  $neg: $neg,
  $plus: $plus
};

function size(x, y) {
  return /* `size */[
          -866934591,
          /* tuple */[
            x,
            y
          ]
        ];
}

function count(x) {
  return /* `count */[
          -899463985,
          x
        ];
}

function localUrl(x) {
  return /* `localUrl */[
          -538079548,
          x
        ];
}

function rotate(a) {
  return /* `rotate */[
          -887077285,
          a
        ];
}

function rotate3d(x, y, z, a) {
  return /* `rotate3d */[
          142802924,
          /* tuple */[
            x,
            y,
            z,
            a
          ]
        ];
}

function url(x) {
  return /* `url */[
          5843823,
          x
        ];
}

function flex3(grow, shrink, basis) {
  return /* D */Block.__(0, [
            "flex",
            grow.toString() + (" " + (shrink.toString() + (" " + (
                    typeof basis === "number" && basis !== -789508312 ? Css_Types$MyBlog.FlexBasis.toString(basis) : Css_Types$MyBlog.Length.toString(basis)
                  ))))
          ]);
}

function flexBasis(x) {
  return /* D */Block.__(0, [
            "flexBasis",
            typeof x === "number" && x !== -789508312 ? Css_Types$MyBlog.FlexBasis.toString(x) : Css_Types$MyBlog.Length.toString(x)
          ]);
}

function order(x) {
  return /* D */Block.__(0, [
            "order",
            x.toString()
          ]);
}

function string_of_minmax(param) {
  if (typeof param === "number") {
    if (param >= -550577721) {
      if (param >= 60557045) {
        return "max-content";
      } else {
        return "min-content";
      }
    } else if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  } else {
    var variant = param[0];
    if (variant >= 22643) {
      if (variant >= 25092) {
        if (variant !== 25096) {
          if (variant >= 26433) {
            if (variant >= 5691738) {
              return param[1].toString() + "rem";
            } else {
              return param[1].toString() + "vw";
            }
          } else if (variant >= 26418) {
            return param[1].toString() + "vh";
          } else {
            return param[1].toString() + "pt";
          }
        } else {
          return param[1].toString() + "px";
        }
      } else if (variant >= 24416) {
        if (variant >= 25075) {
          return param[1].toString() + "pc";
        } else {
          return param[1].toString() + "mm";
        }
      } else if (variant >= 22860) {
        return param[1].toString() + "fr";
      } else {
        return param[1].toString() + "ex";
      }
    } else if (variant >= -833470756) {
      if (variant !== -119887163) {
        if (variant >= 22186) {
          if (variant >= 22632) {
            return param[1].toString() + "em";
          } else {
            return param[1].toString() + "cm";
          }
        } else if (variant >= 22181) {
          return param[1].toString() + "ch";
        } else {
          return param[1].toString() + "vmin";
        }
      } else {
        return param[1].toString() + "%";
      }
    } else if (variant >= -977586742) {
      if (variant >= -833472530) {
        return param[1].toString() + "vmax";
      } else {
        return param[1].toString() + "in";
      }
    } else if (variant >= -1040484748) {
      return param[1].toString() + "px";
    } else {
      var match = param[1];
      if (match[0] >= 5745024) {
        return "calc(" + (Css_Types$MyBlog.Length.toString(match[1]) + (" - " + (Css_Types$MyBlog.Length.toString(match[2]) + ")")));
      } else {
        return "calc(" + (Css_Types$MyBlog.Length.toString(match[1]) + (" + " + (Css_Types$MyBlog.Length.toString(match[2]) + ")")));
      }
    }
  }
}

function string_of_dimension(param) {
  if (typeof param === "number") {
    if (param >= -789508312) {
      if (param >= -195805336) {
        if (param >= 60557045) {
          return "max-content";
        } else {
          return "fit-content";
        }
      } else if (param >= -550577721) {
        return "min-content";
      } else {
        return "0";
      }
    } else if (param >= -922086728) {
      return "none";
    } else {
      return "auto";
    }
  } else {
    var variant = param[0];
    if (variant >= 22632) {
      if (variant >= 25092) {
        if (variant !== 25096) {
          if (variant >= 26433) {
            if (variant >= 5691738) {
              return param[1].toString() + "rem";
            } else {
              return param[1].toString() + "vw";
            }
          } else if (variant >= 26418) {
            return param[1].toString() + "vh";
          } else {
            return param[1].toString() + "pt";
          }
        } else {
          return param[1].toString() + "px";
        }
      } else if (variant !== 22643) {
        if (variant >= 24416) {
          if (variant >= 25075) {
            return param[1].toString() + "pc";
          } else {
            return param[1].toString() + "mm";
          }
        } else if (variant >= 22860) {
          return param[1].toString() + "fr";
        } else {
          return param[1].toString() + "em";
        }
      } else {
        return param[1].toString() + "ex";
      }
    } else if (variant >= -833470756) {
      if (variant !== -754859950) {
        if (variant >= 22181) {
          if (variant >= 22186) {
            return param[1].toString() + "cm";
          } else {
            return param[1].toString() + "ch";
          }
        } else if (variant >= -119887163) {
          return param[1].toString() + "%";
        } else {
          return param[1].toString() + "vmin";
        }
      } else {
        var match = param[1];
        return "minmax(" + (string_of_minmax(match[0]) + ("," + (string_of_minmax(match[1]) + ")")));
      }
    } else if (variant >= -977586742) {
      if (variant >= -833472530) {
        return param[1].toString() + "vmax";
      } else {
        return param[1].toString() + "in";
      }
    } else if (variant >= -1040484748) {
      return param[1].toString() + "px";
    } else {
      var match$1 = param[1];
      if (match$1[0] >= 5745024) {
        return "calc(" + (Css_Types$MyBlog.Length.toString(match$1[1]) + (" - " + (Css_Types$MyBlog.Length.toString(match$1[2]) + ")")));
      } else {
        return "calc(" + (Css_Types$MyBlog.Length.toString(match$1[1]) + (" + " + (Css_Types$MyBlog.Length.toString(match$1[2]) + ")")));
      }
    }
  }
}

function gridLengthToJs(param) {
  if (typeof param === "number") {
    if (param >= -550577721) {
      if (param >= 60557045) {
        return "max-content";
      } else {
        return "min-content";
      }
    } else if (param >= -789508312) {
      return "0";
    } else {
      return "auto";
    }
  } else {
    var variant = param[0];
    if (variant >= 22643) {
      if (variant >= 25096) {
        if (variant !== 26418) {
          if (variant >= 5691738) {
            if (variant >= 108828507) {
              var match = param[1];
              return "repeat(" + (Css_Types$MyBlog.RepeatValue.toString(match[0]) + (", " + (string_of_dimension(match[1]) + ")")));
            } else {
              return param[1].toString() + "rem";
            }
          } else if (variant >= 26433) {
            return param[1].toString() + "vw";
          } else {
            return param[1].toString() + "px";
          }
        } else {
          return param[1].toString() + "vh";
        }
      } else if (variant !== 22860) {
        if (variant >= 25075) {
          if (variant >= 25092) {
            return param[1].toString() + "pt";
          } else {
            return param[1].toString() + "pc";
          }
        } else if (variant >= 24416) {
          return param[1].toString() + "mm";
        } else {
          return param[1].toString() + "ex";
        }
      } else {
        return param[1].toString() + "fr";
      }
    } else if (variant >= -754859950) {
      if (variant !== -119887163) {
        if (variant >= 22186) {
          if (variant >= 22632) {
            return param[1].toString() + "em";
          } else {
            return param[1].toString() + "cm";
          }
        } else if (variant >= 22181) {
          return param[1].toString() + "ch";
        } else {
          var match$1 = param[1];
          return "minmax(" + (string_of_minmax(match$1[0]) + ("," + (string_of_minmax(match$1[1]) + ")")));
        }
      } else {
        return param[1].toString() + "%";
      }
    } else if (variant !== -1040484748) {
      if (variant >= -833472530) {
        if (variant >= -833470756) {
          return param[1].toString() + "vmin";
        } else {
          return param[1].toString() + "vmax";
        }
      } else if (variant >= -977586742) {
        return param[1].toString() + "in";
      } else {
        var match$2 = param[1];
        if (match$2[0] >= 5745024) {
          return "calc(" + (Css_Types$MyBlog.Length.toString(match$2[1]) + (" - " + (Css_Types$MyBlog.Length.toString(match$2[2]) + ")")));
        } else {
          return "calc(" + (Css_Types$MyBlog.Length.toString(match$2[1]) + (" + " + (Css_Types$MyBlog.Length.toString(match$2[2]) + ")")));
        }
      }
    } else {
      return param[1].toString() + "px";
    }
  }
}

function string_of_dimensions(dimensions) {
  return $$String.concat(" ", List.map(gridLengthToJs, dimensions));
}

function gridTemplateColumns(dimensions) {
  return /* D */Block.__(0, [
            "gridTemplateColumns",
            string_of_dimensions(dimensions)
          ]);
}

function gridTemplateRows(dimensions) {
  return /* D */Block.__(0, [
            "gridTemplateRows",
            string_of_dimensions(dimensions)
          ]);
}

function gridAutoColumns(dimensions) {
  return /* D */Block.__(0, [
            "gridAutoColumns",
            string_of_dimension(dimensions)
          ]);
}

function gridAutoRows(dimensions) {
  return /* D */Block.__(0, [
            "gridAutoRows",
            string_of_dimension(dimensions)
          ]);
}

function gridArea(s) {
  return /* D */Block.__(0, [
            "gridArea",
            typeof s === "number" && s >= -878767996 ? Css_Types$MyBlog.Cascading.toString(s) : Css_Types$MyBlog.GridArea.toString(s)
          ]);
}

function gridArea2(s, s2) {
  return /* D */Block.__(0, [
            "gridArea",
            Css_Types$MyBlog.GridArea.toString(s) + (" / " + Css_Types$MyBlog.GridArea.toString(s2))
          ]);
}

function gridArea3(s, s2, s3) {
  return /* D */Block.__(0, [
            "gridArea",
            Css_Types$MyBlog.GridArea.toString(s) + (" / " + (Css_Types$MyBlog.GridArea.toString(s2) + (" / " + Css_Types$MyBlog.GridArea.toString(s3))))
          ]);
}

function gridArea4(s, s2, s3, s4) {
  return /* D */Block.__(0, [
            "gridArea",
            Css_Types$MyBlog.GridArea.toString(s) + (" / " + (Css_Types$MyBlog.GridArea.toString(s2) + (" / " + (Css_Types$MyBlog.GridArea.toString(s3) + (" / " + Css_Types$MyBlog.GridArea.toString(s4))))))
          ]);
}

function gridTemplateAreas(l) {
  return /* D */Block.__(0, [
            "gridTemplateAreas",
            typeof l === "number" && l >= -878767996 ? Css_Types$MyBlog.Cascading.toString(l) : Css_Types$MyBlog.GridTemplateAreas.toString(l)
          ]);
}

function string_of_filter(param) {
  if (typeof param === "number") {
    if (param >= -601204732) {
      if (param >= 653193961) {
        return "unset";
      } else {
        return "inherit";
      }
    } else if (param >= -878767996) {
      return "initial";
    } else {
      return "none";
    }
  } else {
    var variant = param[0];
    if (variant >= -97740042) {
      if (variant >= 5843823) {
        if (variant >= 934407426) {
          if (variant >= 1036870963) {
            return "hue-rotate(" + (Css_Types$MyBlog.Angle.toString(param[1]) + ")");
          } else {
            return "contrast(" + (param[1].toString() + "%)");
          }
        } else if (variant >= 534308630) {
          return "invert(" + (param[1].toString() + "%)");
        } else {
          return "url(" + (param[1] + ")");
        }
      } else if (variant >= -29929489) {
        return "saturate(" + (param[1].toString() + "%)");
      } else {
        return "sepia(" + (param[1].toString() + "%)");
      }
    } else if (variant !== -594525841) {
      if (variant >= -345678389) {
        if (variant >= -214464569) {
          return "grayscale(" + (param[1].toString() + "%)");
        } else {
          return "opacity(" + (param[1].toString() + "%)");
        }
      } else if (variant >= -445542959) {
        return "brightness(" + (param[1].toString() + "%)");
      } else {
        return "blur(" + (Css_Types$MyBlog.Length.toString(param[1]) + ")");
      }
    } else {
      var match = param[1];
      return "drop-shadow(" + (Css_Types$MyBlog.Length.toString(match[0]) + (" " + (Css_Types$MyBlog.Length.toString(match[1]) + (" " + (Css_Types$MyBlog.Length.toString(match[2]) + (" " + (Css_Types$MyBlog.Color.toString(match[3]) + ")")))))));
    }
  }
}

function filter(x) {
  return /* D */Block.__(0, [
            "filter",
            join(Belt_List.map(x, string_of_filter), " ")
          ]);
}

function box($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, color) {
  var x = $staropt$star !== undefined ? $staropt$star : zero;
  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : zero;
  var blur = $staropt$star$2 !== undefined ? $staropt$star$2 : zero;
  var spread = $staropt$star$3 !== undefined ? $staropt$star$3 : zero;
  var inset = $staropt$star$4 !== undefined ? $staropt$star$4 : false;
  return /* `shadow */[
          488687584,
          Css_Types$MyBlog.Length.toString(x) + (" " + (Css_Types$MyBlog.Length.toString(y) + (" " + (Css_Types$MyBlog.Length.toString(blur) + (" " + (Css_Types$MyBlog.Length.toString(spread) + (" " + (Css_Types$MyBlog.Color.toString(color) + (
                            inset ? " inset" : ""
                          )))))))))
        ];
}

function text($staropt$star, $staropt$star$1, $staropt$star$2, color) {
  var x = $staropt$star !== undefined ? $staropt$star : zero;
  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : zero;
  var blur = $staropt$star$2 !== undefined ? $staropt$star$2 : zero;
  return /* `shadow */[
          488687584,
          Css_Types$MyBlog.Length.toString(x) + (" " + (Css_Types$MyBlog.Length.toString(y) + (" " + (Css_Types$MyBlog.Length.toString(blur) + (" " + Css_Types$MyBlog.Color.toString(color))))))
        ];
}

function toString$1(param) {
  if (typeof param === "number") {
    return "none";
  } else {
    return param[1];
  }
}

var Shadow = {
  box: box,
  text: text,
  toString: toString$1
};

function boxShadow(x) {
  return /* D */Block.__(0, [
            "boxShadow",
            typeof x === "number" && x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : toString$1(x)
          ]);
}

function boxShadows(x) {
  return /* D */Block.__(0, [
            "boxShadow",
            join(Belt_List.map(x, toString$1), ", ")
          ]);
}

function string_of_borderstyle(b) {
  if (b !== -878767996 && b !== -601204732 && b !== 653193961) {
    return Css_Types$MyBlog.BorderStyle.toString(b);
  } else {
    return Css_Types$MyBlog.Cascading.toString(b);
  }
}

function border(px, style, color) {
  return /* D */Block.__(0, [
            "border",
            Css_Types$MyBlog.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_Types$MyBlog.Color.toString(color))))
          ]);
}

function borderStyle(x) {
  return /* D */Block.__(0, [
            "borderStyle",
            string_of_borderstyle(x)
          ]);
}

function borderLeft(px, style, color) {
  return /* D */Block.__(0, [
            "borderLeft",
            Css_Types$MyBlog.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_Types$MyBlog.Color.toString(color))))
          ]);
}

function borderLeftStyle(x) {
  return /* D */Block.__(0, [
            "borderLeftStyle",
            string_of_borderstyle(x)
          ]);
}

function borderRight(px, style, color) {
  return /* D */Block.__(0, [
            "borderRight",
            Css_Types$MyBlog.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_Types$MyBlog.Color.toString(color))))
          ]);
}

function borderRightStyle(x) {
  return /* D */Block.__(0, [
            "borderRightStyle",
            string_of_borderstyle(x)
          ]);
}

function borderTop(px, style, color) {
  return /* D */Block.__(0, [
            "borderTop",
            Css_Types$MyBlog.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_Types$MyBlog.Color.toString(color))))
          ]);
}

function borderTopStyle(x) {
  return /* D */Block.__(0, [
            "borderTopStyle",
            string_of_borderstyle(x)
          ]);
}

function borderBottom(px, style, color) {
  return /* D */Block.__(0, [
            "borderBottom",
            Css_Types$MyBlog.Length.toString(px) + (" " + (string_of_borderstyle(style) + (" " + Css_Types$MyBlog.Color.toString(color))))
          ]);
}

function borderBottomStyle(x) {
  return /* D */Block.__(0, [
            "borderBottomStyle",
            string_of_borderstyle(x)
          ]);
}

function background(x) {
  return /* D */Block.__(0, [
            "background",
            string_of_background(x)
          ]);
}

function backgrounds(bg) {
  return /* D */Block.__(0, [
            "background",
            join(Belt_List.map(bg, string_of_background), ", ")
          ]);
}

function backgroundSize(x) {
  var tmp;
  if (typeof x === "number") {
    tmp = x !== -899416265 ? (
        x >= 427065300 ? "contain" : "auto"
      ) : "cover";
  } else {
    var match = x[1];
    tmp = Css_Types$MyBlog.Length.toString(match[0]) + (" " + Css_Types$MyBlog.Length.toString(match[1]));
  }
  return /* D */Block.__(0, [
            "backgroundSize",
            tmp
          ]);
}

function fontFace(fontFamily, src, fontStyle, fontWeight, param) {
  var fontStyle$1 = Js_option.map((function (value) {
          return Css_Types$MyBlog.FontStyle.toString(value);
        }), fontStyle);
  var src$1 = $$String.concat(", ", List.map((function (param) {
              if (param[0] >= 5843823) {
                return "url(\"" + (String(param[1]) + "\")");
              } else {
                return "local(\"" + (String(param[1]) + "\")");
              }
            }), src));
  var fontStyle$2 = Belt_Option.mapWithDefault(fontStyle$1, "", (function (s) {
          return "font-style: " + s;
        }));
  var fontWeight$1 = Belt_Option.mapWithDefault(fontWeight, "", (function (w) {
          return "font-weight: " + (
                  typeof w === "number" && !(w !== -878767996 && w !== -601204732 && w !== 653193961) ? Css_Types$MyBlog.Cascading.toString(w) : Css_Types$MyBlog.FontWeight.toString(w)
                );
        }));
  var asString = "@font-face {\n    font-family: " + (String(fontFamily) + (";\n    src: " + (String(src$1) + (";\n    " + (String(fontStyle$2) + (";\n    " + (String(fontWeight$1) + ";\n}")))))));
  Emotion.injectGlobal(asString);
  return fontFamily;
}

function textDecoration(x) {
  return /* D */Block.__(0, [
            "textDecoration",
            x >= -601204732 ? (
                x >= 412155569 ? (
                    x >= 653193961 ? "unset" : "line-through"
                  ) : (
                    x >= 131142924 ? "underline" : "inherit"
                  )
              ) : (
                x !== -922086728 ? (
                    x >= -878767996 ? "initial" : "overline"
                  ) : "none"
              )
          ]);
}

function textShadow(x) {
  return /* D */Block.__(0, [
            "textShadow",
            typeof x === "number" && x >= -878767996 ? Css_Types$MyBlog.Cascading.toString(x) : toString$1(x)
          ]);
}

function textShadows(x) {
  return /* D */Block.__(0, [
            "textShadow",
            join(Belt_List.map(x, toString$1), ", ")
          ]);
}

function transformStyle(x) {
  return /* D */Block.__(0, [
            "transformStyle",
            x !== 589702045 && x >= -1010955334 ? Css_Types$MyBlog.Cascading.toString(x) : Css_Types$MyBlog.TransformStyle.toString(x)
          ]);
}

function shorthand($staropt$star, $staropt$star$1, $staropt$star$2, property) {
  var duration = $staropt$star !== undefined ? $staropt$star : 0;
  var delay = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var timingFunction = $staropt$star$2 !== undefined ? $staropt$star$2 : /* ease */-1022587922;
  return /* `value */[
          834174833,
          duration.toString() + "ms " + (Css_Types$MyBlog.TimingFunction.toString(timingFunction) + (" " + (delay.toString() + "ms " + property)))
        ];
}

function toString$2(param) {
  return param[1];
}

var Transition = {
  shorthand: shorthand,
  toString: toString$2
};

function transitionValue(x) {
  return /* D */Block.__(0, [
            "transition",
            x[1]
          ]);
}

function transitionList(x) {
  return /* D */Block.__(0, [
            "transition",
            join(Belt_List.map(x, toString$2), ", ")
          ]);
}

function transition(duration, delay, timingFunction, property) {
  var x = shorthand(duration, delay, timingFunction, property);
  return /* D */Block.__(0, [
            "transition",
            x[1]
          ]);
}

function transitionDelay(i) {
  return /* D */Block.__(0, [
            "transitionDelay",
            i.toString() + "ms"
          ]);
}

function transitionDuration(i) {
  return /* D */Block.__(0, [
            "transitionDuration",
            i.toString() + "ms"
          ]);
}

function transitionTimingFunction(x) {
  return /* D */Block.__(0, [
            "transitionTimingFunction",
            Css_Types$MyBlog.TimingFunction.toString(x)
          ]);
}

function transitionProperty(x) {
  return /* D */Block.__(0, [
            "transitionProperty",
            x
          ]);
}

function shorthand$1($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, name) {
  var duration = $staropt$star !== undefined ? $staropt$star : 0;
  var delay = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  var direction = $staropt$star$2 !== undefined ? $staropt$star$2 : /* normal */812216871;
  var timingFunction = $staropt$star$3 !== undefined ? $staropt$star$3 : /* ease */-1022587922;
  var fillMode = $staropt$star$4 !== undefined ? $staropt$star$4 : /* none */-922086728;
  var playState = $staropt$star$5 !== undefined ? $staropt$star$5 : /* running */-345412097;
  var iterationCount = $staropt$star$6 !== undefined ? $staropt$star$6 : /* `count */[
      -899463985,
      1
    ];
  return /* `value */[
          834174833,
          name + (" " + (duration.toString() + "ms " + (Css_Types$MyBlog.TimingFunction.toString(timingFunction) + (" " + (delay.toString() + "ms " + (Css_Types$MyBlog.AnimationIterationCount.toString(iterationCount) + (" " + (Css_Types$MyBlog.AnimationDirection.toString(direction) + (" " + (Css_Types$MyBlog.AnimationFillMode.toString(fillMode) + (" " + Css_Types$MyBlog.AnimationPlayState.toString(playState))))))))))))
        ];
}

function toString$3(param) {
  return param[1];
}

var Animation = {
  shorthand: shorthand$1,
  toString: toString$3
};

function animationValue(x) {
  return /* D */Block.__(0, [
            "animation",
            x[1]
          ]);
}

function animation(duration, delay, direction, timingFunction, fillMode, playState, iterationCount, name) {
  var x = shorthand$1(duration, delay, direction, timingFunction, fillMode, playState, iterationCount, name);
  return /* D */Block.__(0, [
            "animation",
            x[1]
          ]);
}

function animations(x) {
  return /* D */Block.__(0, [
            "animation",
            join(Belt_List.map(x, toString$3), ", ")
          ]);
}

function animationName(x) {
  return /* D */Block.__(0, [
            "animationName",
            x
          ]);
}

function fill(x) {
  return /* D */Block.__(0, [
            "fill",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function fillOpacity(opacity) {
  return /* D */Block.__(0, [
            "fillOpacity",
            opacity.toString()
          ]);
}

function fillRule(x) {
  return /* D */Block.__(0, [
            "fillRule",
            x >= 110563029 ? "evenodd" : "nonzero"
          ]);
}

function stroke(x) {
  return /* D */Block.__(0, [
            "stroke",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function strokeWidth(x) {
  return /* D */Block.__(0, [
            "strokeWidth",
            Css_Types$MyBlog.Length.toString(x)
          ]);
}

function strokeOpacity(opacity) {
  return /* D */Block.__(0, [
            "strokeOpacity",
            opacity.toString()
          ]);
}

function strokeMiterlimit(x) {
  return /* D */Block.__(0, [
            "strokeMiterlimit",
            x.toString()
          ]);
}

function strokeLinecap(x) {
  return /* D */Block.__(0, [
            "strokeLinecap",
            x !== -655228771 ? (
                x >= -312084402 ? "round" : "butt"
              ) : "square"
          ]);
}

function strokeLinejoin(x) {
  return /* D */Block.__(0, [
            "strokeLinejoin",
            x !== 141361157 ? (
                x >= 811681914 ? "bevel" : "round"
              ) : "miter"
          ]);
}

function stopColor(x) {
  return /* D */Block.__(0, [
            "stopColor",
            Css_Types$MyBlog.Color.toString(x)
          ]);
}

function stopOpacity(x) {
  return /* D */Block.__(0, [
            "stopOpacity",
            x.toString()
          ]);
}

var Types = 0;

var merge = mergeStyles;

var style = make;

var toJson = makeJson;

var wordWrap = overflowWrap;

var fixed = /* fixed */10615156;

var hidden = /* hidden */-862584982;

var visible = /* visible */589592690;

var scroll = /* scroll */-949692403;

var auto = /* auto */-1065951377;

var none = /* none */-922086728;

var local = /* local */-118437525;

var paddingBox = /* paddingBox */972575930;

var borderBox = /* borderBox */9307263;

var contentBox = /* contentBox */-1008848302;

var noRepeat = /* noRepeat */-695430532;

var space = /* space */23497926;

var repeat = /* repeat */108828507;

var minmax = /* minmax */-754859950;

var repeatX = /* repeatX */646437021;

var repeatY = /* repeatY */646437022;

var contain = /* contain */427065300;

var cover = /* cover */-899416265;

var row = /* row */5693978;

var rowReverse = /* rowReverse */378951208;

var column = /* column */-963948842;

var columnReverse = /* columnReverse */135477484;

var wrap = /* wrap */-822134326;

var nowrap = /* nowrap */867913355;

var wrapReverse = /* wrapReverse */-463121288;

var inline = /* inline */423610969;

var block = /* block */888960333;

var contents = /* contents */790889754;

var flexBox = /* flex */-1010954439;

var grid = /* grid */-999565626;

var inlineBlock = /* inlineBlock */-147785676;

var inlineFlex = /* inlineFlex */53323314;

var inlineGrid = /* inlineGrid */64712127;

var inlineTable = /* inlineTable */-854050059;

var listItem = /* listItem */632591505;

var runIn = /* runIn */-245903344;

var table = /* table */182695950;

var tableCaption = /* tableCaption */1054826616;

var tableColumnGroup = /* tableColumnGroup */850209563;

var tableHeaderGroup = /* tableHeaderGroup */606419204;

var tableFooterGroup = /* tableFooterGroup */-1045696202;

var tableRowGroup = /* tableRowGroup */-836725517;

var tableCell = /* tableCell */793912528;

var tableColumn = /* tableColumn */97122692;

var tableRow = /* tableRow */-843129172;

var flexStart = /* flexStart */662439529;

var flexEnd = /* flexEnd */924268066;

var center = /* center */98248149;

var stretch = /* stretch */-162316795;

var spaceBetween = /* spaceBetween */516682146;

var spaceAround = /* spaceAround */-485895757;

var spaceEvenly = /* spaceEvenly */-1016061555;

var baseline = /* baseline */287825029;

var forwards = /* forwards */733653774;

var backwards = /* backwards */245861168;

var both = /* both */-1055160191;

var infinite = /* infinite */-630647084;

var paused = /* paused */-276545362;

var running = /* running */-345412097;

var inside = /* inside */501235708;

var outside = /* outside */-430011099;

var solid = /* solid */12956715;

var dotted = /* dotted */841979626;

var dashed = /* dashed */568403505;

var underline = /* underline */131142924;

var overline = /* overline */-986651832;

var lineThrough = /* lineThrough */412155569;

var clip = /* clip */-1044222256;

var ellipsis = /* ellipsis */166888785;

var wavy = /* wavy */-822975027;

var $$double = /* double */852175633;

var uppercase = /* uppercase */-415330030;

var lowercase = /* lowercase */-425349839;

var capitalize = /* capitalize */-509867604;

var sub = /* sub */5745024;

var $$super = /* super */79692155;

var textTop = /* textTop */516406248;

var textBottom = /* textBottom */476669816;

var middle = /* middle */-866200747;

var normal = /* normal */812216871;

var breakAll = /* breakAll */-323760734;

var keepAll = /* keepAll */892748188;

var breakWord = /* breakWord */1059921449;

var reverse = /* reverse */452737314;

var alternate = /* alternate */892586298;

var alternateReverse = /* alternateReverse */545428232;

var fill$1 = /* fill */-1011102077;

var content = /* content */427265337;

var maxContent = /* maxContent */60557045;

var minContent = /* minContent */-550577721;

var fitContent = /* fitContent */-195805336;

var all = /* all */4847905;

var text$1 = /* text */-856044371;

var round = /* round */-312084402;

var miter = /* miter */141361157;

var bevel = /* bevel */811681914;

var butt = /* butt */-1054861805;

var square = /* square */-655228771;

var transitions = transitionList;

var SVG = {
  fill: fill,
  fillRule: fillRule,
  fillOpacity: fillOpacity,
  stroke: stroke,
  strokeLinecap: strokeLinecap,
  strokeLinejoin: strokeLinejoin,
  strokeMiterlimit: strokeMiterlimit,
  strokeWidth: strokeWidth,
  strokeOpacity: strokeOpacity,
  stopColor: stopColor,
  stopOpacity: stopOpacity
};

var aliceblue = Css_Colors$MyBlog.aliceblue;

var antiquewhite = Css_Colors$MyBlog.antiquewhite;

var aqua = Css_Colors$MyBlog.aqua;

var aquamarine = Css_Colors$MyBlog.aquamarine;

var azure = Css_Colors$MyBlog.azure;

var beige = Css_Colors$MyBlog.beige;

var bisque = Css_Colors$MyBlog.bisque;

var black = Css_Colors$MyBlog.black;

var blanchedalmond = Css_Colors$MyBlog.blanchedalmond;

var blue = Css_Colors$MyBlog.blue;

var blueviolet = Css_Colors$MyBlog.blueviolet;

var brown = Css_Colors$MyBlog.brown;

var burlywood = Css_Colors$MyBlog.burlywood;

var cadetblue = Css_Colors$MyBlog.cadetblue;

var chartreuse = Css_Colors$MyBlog.chartreuse;

var chocolate = Css_Colors$MyBlog.chocolate;

var coral = Css_Colors$MyBlog.coral;

var cornflowerblue = Css_Colors$MyBlog.cornflowerblue;

var cornsilk = Css_Colors$MyBlog.cornsilk;

var crimson = Css_Colors$MyBlog.crimson;

var cyan = Css_Colors$MyBlog.cyan;

var darkblue = Css_Colors$MyBlog.darkblue;

var darkcyan = Css_Colors$MyBlog.darkcyan;

var darkgoldenrod = Css_Colors$MyBlog.darkgoldenrod;

var darkgray = Css_Colors$MyBlog.darkgray;

var darkgrey = Css_Colors$MyBlog.darkgrey;

var darkgreen = Css_Colors$MyBlog.darkgreen;

var darkkhaki = Css_Colors$MyBlog.darkkhaki;

var darkmagenta = Css_Colors$MyBlog.darkmagenta;

var darkolivegreen = Css_Colors$MyBlog.darkolivegreen;

var darkorange = Css_Colors$MyBlog.darkorange;

var darkorchid = Css_Colors$MyBlog.darkorchid;

var darkred = Css_Colors$MyBlog.darkred;

var darksalmon = Css_Colors$MyBlog.darksalmon;

var darkseagreen = Css_Colors$MyBlog.darkseagreen;

var darkslateblue = Css_Colors$MyBlog.darkslateblue;

var darkslategray = Css_Colors$MyBlog.darkslategray;

var darkslategrey = Css_Colors$MyBlog.darkslategrey;

var darkturquoise = Css_Colors$MyBlog.darkturquoise;

var darkviolet = Css_Colors$MyBlog.darkviolet;

var deeppink = Css_Colors$MyBlog.deeppink;

var deepskyblue = Css_Colors$MyBlog.deepskyblue;

var dimgray = Css_Colors$MyBlog.dimgray;

var dimgrey = Css_Colors$MyBlog.dimgrey;

var dodgerblue = Css_Colors$MyBlog.dodgerblue;

var firebrick = Css_Colors$MyBlog.firebrick;

var floralwhite = Css_Colors$MyBlog.floralwhite;

var forestgreen = Css_Colors$MyBlog.forestgreen;

var fuchsia = Css_Colors$MyBlog.fuchsia;

var gainsboro = Css_Colors$MyBlog.gainsboro;

var ghostwhite = Css_Colors$MyBlog.ghostwhite;

var gold = Css_Colors$MyBlog.gold;

var goldenrod = Css_Colors$MyBlog.goldenrod;

var gray = Css_Colors$MyBlog.gray;

var grey = Css_Colors$MyBlog.grey;

var green = Css_Colors$MyBlog.green;

var greenyellow = Css_Colors$MyBlog.greenyellow;

var honeydew = Css_Colors$MyBlog.honeydew;

var hotpink = Css_Colors$MyBlog.hotpink;

var indianred = Css_Colors$MyBlog.indianred;

var indigo = Css_Colors$MyBlog.indigo;

var ivory = Css_Colors$MyBlog.ivory;

var khaki = Css_Colors$MyBlog.khaki;

var lavender = Css_Colors$MyBlog.lavender;

var lavenderblush = Css_Colors$MyBlog.lavenderblush;

var lawngreen = Css_Colors$MyBlog.lawngreen;

var lemonchiffon = Css_Colors$MyBlog.lemonchiffon;

var lightblue = Css_Colors$MyBlog.lightblue;

var lightcoral = Css_Colors$MyBlog.lightcoral;

var lightcyan = Css_Colors$MyBlog.lightcyan;

var lightgoldenrodyellow = Css_Colors$MyBlog.lightgoldenrodyellow;

var lightgray = Css_Colors$MyBlog.lightgray;

var lightgrey = Css_Colors$MyBlog.lightgrey;

var lightgreen = Css_Colors$MyBlog.lightgreen;

var lightpink = Css_Colors$MyBlog.lightpink;

var lightsalmon = Css_Colors$MyBlog.lightsalmon;

var lightseagreen = Css_Colors$MyBlog.lightseagreen;

var lightskyblue = Css_Colors$MyBlog.lightskyblue;

var lightslategray = Css_Colors$MyBlog.lightslategray;

var lightslategrey = Css_Colors$MyBlog.lightslategrey;

var lightsteelblue = Css_Colors$MyBlog.lightsteelblue;

var lightyellow = Css_Colors$MyBlog.lightyellow;

var lime = Css_Colors$MyBlog.lime;

var limegreen = Css_Colors$MyBlog.limegreen;

var linen = Css_Colors$MyBlog.linen;

var magenta = Css_Colors$MyBlog.magenta;

var maroon = Css_Colors$MyBlog.maroon;

var mediumaquamarine = Css_Colors$MyBlog.mediumaquamarine;

var mediumblue = Css_Colors$MyBlog.mediumblue;

var mediumorchid = Css_Colors$MyBlog.mediumorchid;

var mediumpurple = Css_Colors$MyBlog.mediumpurple;

var mediumseagreen = Css_Colors$MyBlog.mediumseagreen;

var mediumslateblue = Css_Colors$MyBlog.mediumslateblue;

var mediumspringgreen = Css_Colors$MyBlog.mediumspringgreen;

var mediumturquoise = Css_Colors$MyBlog.mediumturquoise;

var mediumvioletred = Css_Colors$MyBlog.mediumvioletred;

var midnightblue = Css_Colors$MyBlog.midnightblue;

var mintcream = Css_Colors$MyBlog.mintcream;

var mistyrose = Css_Colors$MyBlog.mistyrose;

var moccasin = Css_Colors$MyBlog.moccasin;

var navajowhite = Css_Colors$MyBlog.navajowhite;

var navy = Css_Colors$MyBlog.navy;

var oldlace = Css_Colors$MyBlog.oldlace;

var olive = Css_Colors$MyBlog.olive;

var olivedrab = Css_Colors$MyBlog.olivedrab;

var orange = Css_Colors$MyBlog.orange;

var orangered = Css_Colors$MyBlog.orangered;

var orchid = Css_Colors$MyBlog.orchid;

var palegoldenrod = Css_Colors$MyBlog.palegoldenrod;

var palegreen = Css_Colors$MyBlog.palegreen;

var paleturquoise = Css_Colors$MyBlog.paleturquoise;

var palevioletred = Css_Colors$MyBlog.palevioletred;

var papayawhip = Css_Colors$MyBlog.papayawhip;

var peachpuff = Css_Colors$MyBlog.peachpuff;

var peru = Css_Colors$MyBlog.peru;

var pink = Css_Colors$MyBlog.pink;

var plum = Css_Colors$MyBlog.plum;

var powderblue = Css_Colors$MyBlog.powderblue;

var purple = Css_Colors$MyBlog.purple;

var rebeccapurple = Css_Colors$MyBlog.rebeccapurple;

var red = Css_Colors$MyBlog.red;

var rosybrown = Css_Colors$MyBlog.rosybrown;

var royalblue = Css_Colors$MyBlog.royalblue;

var saddlebrown = Css_Colors$MyBlog.saddlebrown;

var salmon = Css_Colors$MyBlog.salmon;

var sandybrown = Css_Colors$MyBlog.sandybrown;

var seagreen = Css_Colors$MyBlog.seagreen;

var seashell = Css_Colors$MyBlog.seashell;

var sienna = Css_Colors$MyBlog.sienna;

var silver = Css_Colors$MyBlog.silver;

var skyblue = Css_Colors$MyBlog.skyblue;

var slateblue = Css_Colors$MyBlog.slateblue;

var slategray = Css_Colors$MyBlog.slategray;

var slategrey = Css_Colors$MyBlog.slategrey;

var snow = Css_Colors$MyBlog.snow;

var springgreen = Css_Colors$MyBlog.springgreen;

var steelblue = Css_Colors$MyBlog.steelblue;

var tan = Css_Colors$MyBlog.tan;

var teal = Css_Colors$MyBlog.teal;

var thistle = Css_Colors$MyBlog.thistle;

var tomato = Css_Colors$MyBlog.tomato;

var turquoise = Css_Colors$MyBlog.turquoise;

var violet = Css_Colors$MyBlog.violet;

var wheat = Css_Colors$MyBlog.wheat;

var white = Css_Colors$MyBlog.white;

var whitesmoke = Css_Colors$MyBlog.whitesmoke;

var yellow = Css_Colors$MyBlog.yellow;

var yellowgreen = Css_Colors$MyBlog.yellowgreen;

export {
  Types ,
  merge ,
  style ,
  toJson ,
  cache ,
  $$global ,
  insertRule ,
  important ,
  label ,
  Shadow ,
  unsafe ,
  alignContent ,
  alignItems ,
  alignSelf ,
  animationDelay ,
  animationDirection ,
  animationDuration ,
  animationFillMode ,
  animationIterationCount ,
  animationPlayState ,
  animationTimingFunction ,
  backfaceVisibility ,
  backgroundAttachment ,
  backgroundColor ,
  backgroundClip ,
  backgroundImage ,
  backgroundOrigin ,
  backgroundPosition ,
  backgroundRepeat ,
  borderBottom ,
  borderBottomColor ,
  borderBottomLeftRadius ,
  borderBottomRightRadius ,
  borderBottomStyle ,
  borderBottomWidth ,
  borderCollapse ,
  borderColor ,
  borderLeft ,
  borderLeftColor ,
  borderLeftStyle ,
  borderLeftWidth ,
  borderRight ,
  borderRightColor ,
  borderRightStyle ,
  borderRightWidth ,
  borderRadius ,
  borderSpacing ,
  borderStyle ,
  borderTopColor ,
  borderTopLeftRadius ,
  borderTopRightRadius ,
  borderTopStyle ,
  borderTopWidth ,
  borderWidth ,
  bottom ,
  boxSizing ,
  boxShadow ,
  boxShadows ,
  clear ,
  clipPath ,
  color ,
  columnCount ,
  contentRule ,
  cursor ,
  direction ,
  display ,
  flex ,
  flexBasis ,
  flexDirection ,
  flexGrow ,
  flexShrink ,
  flexWrap ,
  $$float ,
  fontFamily ,
  fontSize ,
  fontStyle ,
  fontVariant ,
  fontWeight ,
  gridArea ,
  gridArea2 ,
  gridArea3 ,
  gridArea4 ,
  gridAutoFlow ,
  gridColumn ,
  gridColumnEnd ,
  gridColumnGap ,
  gridColumnStart ,
  gridGap ,
  gridRow ,
  gridRowEnd ,
  gridRowGap ,
  gridRowStart ,
  gridTemplateAreas ,
  height ,
  justifyContent ,
  justifySelf ,
  left ,
  letterSpacing ,
  lineHeight ,
  listStyle ,
  listStyleImage ,
  listStyleType ,
  listStylePosition ,
  margin ,
  margin2 ,
  margin3 ,
  margin4 ,
  marginLeft ,
  marginRight ,
  marginTop ,
  marginBottom ,
  maxHeight ,
  maxWidth ,
  minHeight ,
  minWidth ,
  objectFit ,
  opacity ,
  order ,
  outline ,
  outlineColor ,
  outlineOffset ,
  outlineStyle ,
  outlineWidth ,
  overflow ,
  overflowX ,
  overflowY ,
  overflowWrap ,
  padding ,
  padding2 ,
  padding3 ,
  padding4 ,
  paddingLeft ,
  paddingRight ,
  paddingTop ,
  paddingBottom ,
  perspective ,
  perspectiveOrigin ,
  pointerEvents ,
  position ,
  resize ,
  right ,
  tableLayout ,
  textAlign ,
  textDecorationColor ,
  textDecorationLine ,
  textDecorationStyle ,
  textIndent ,
  textOverflow ,
  textShadow ,
  textShadows ,
  textTransform ,
  top ,
  transform ,
  transforms ,
  transformOrigin ,
  transformOrigin3d ,
  transitionDelay ,
  transitionDuration ,
  transitionProperty ,
  transformStyle ,
  transitionTimingFunction ,
  userSelect ,
  verticalAlign ,
  visibility ,
  width ,
  whiteSpace ,
  wordBreak ,
  wordSpacing ,
  wordWrap ,
  zIndex ,
  selector ,
  media ,
  active ,
  checked ,
  $$default ,
  $$default as default,
  defined ,
  disabled ,
  empty ,
  enabled ,
  first ,
  firstChild ,
  firstOfType ,
  focus ,
  focusWithin ,
  host ,
  hover ,
  indeterminate ,
  inRange ,
  invalid ,
  lang ,
  lastChild ,
  lastOfType ,
  link ,
  not__ ,
  Nth ,
  nthChild ,
  nthLastChild ,
  nthLastOfType ,
  nthOfType ,
  onlyChild ,
  onlyOfType ,
  optional ,
  outOfRange ,
  readOnly ,
  readWrite ,
  required ,
  root ,
  scope ,
  target ,
  valid ,
  visited ,
  after ,
  before ,
  children ,
  directSibling ,
  noContent ,
  anyLink ,
  siblings ,
  firstLine ,
  firstLetter ,
  selection ,
  placeholder ,
  initial ,
  inherit_ ,
  unset ,
  pct ,
  ch ,
  cm ,
  em ,
  ex ,
  mm ,
  pt ,
  px ,
  pxFloat ,
  rem ,
  vh ,
  vmin ,
  vmax ,
  zero ,
  deg ,
  rad ,
  grad ,
  turn ,
  ltr ,
  rtl ,
  absolute ,
  relative ,
  $$static ,
  fixed ,
  sticky ,
  horizontal ,
  vertical ,
  smallCaps ,
  italic ,
  oblique ,
  hidden ,
  visible ,
  scroll ,
  auto ,
  rgb ,
  rgba ,
  hsl ,
  hsla ,
  hex ,
  transparent ,
  currentColor ,
  none ,
  local ,
  paddingBox ,
  borderBox ,
  contentBox ,
  noRepeat ,
  space ,
  repeat ,
  minmax ,
  repeatX ,
  repeatY ,
  contain ,
  cover ,
  row ,
  rowReverse ,
  column ,
  columnReverse ,
  wrap ,
  nowrap ,
  wrapReverse ,
  inline ,
  block ,
  contents ,
  flexBox ,
  grid ,
  inlineBlock ,
  inlineFlex ,
  inlineGrid ,
  inlineTable ,
  listItem ,
  runIn ,
  table ,
  tableCaption ,
  tableColumnGroup ,
  tableHeaderGroup ,
  tableFooterGroup ,
  tableRowGroup ,
  tableCell ,
  tableColumn ,
  tableRow ,
  flexStart ,
  flexEnd ,
  center ,
  stretch ,
  spaceBetween ,
  spaceAround ,
  spaceEvenly ,
  baseline ,
  forwards ,
  backwards ,
  both ,
  infinite ,
  count ,
  paused ,
  running ,
  inside ,
  outside ,
  solid ,
  dotted ,
  dashed ,
  underline ,
  overline ,
  lineThrough ,
  clip ,
  ellipsis ,
  wavy ,
  $$double ,
  uppercase ,
  lowercase ,
  capitalize ,
  sub ,
  $$super ,
  textTop ,
  textBottom ,
  middle ,
  normal ,
  breakAll ,
  keepAll ,
  breakWord ,
  reverse ,
  alternate ,
  alternateReverse ,
  fill$1 as fill,
  content ,
  maxContent ,
  minContent ,
  fitContent ,
  all ,
  text$1 as text,
  round ,
  miter ,
  bevel ,
  butt ,
  square ,
  thin ,
  extraLight ,
  light ,
  medium ,
  semiBold ,
  bold ,
  extraBold ,
  lighter ,
  bolder ,
  fr ,
  vw ,
  localUrl ,
  url ,
  linear ,
  ease ,
  easeIn ,
  easeOut ,
  easeInOut ,
  stepStart ,
  stepEnd ,
  steps ,
  cubicBezier ,
  marginBox ,
  fillBox ,
  strokeBox ,
  viewBox ,
  translate ,
  translate3d ,
  translateX ,
  translateY ,
  translateZ ,
  scale ,
  scale3d ,
  scaleX ,
  scaleY ,
  scaleZ ,
  rotate ,
  rotate3d ,
  rotateX ,
  rotateY ,
  rotateZ ,
  skew ,
  skewX ,
  skewY ,
  linearGradient ,
  repeatingLinearGradient ,
  radialGradient ,
  repeatingRadialGradient ,
  flex3 ,
  gridAutoColumns ,
  gridAutoRows ,
  border ,
  borderTop ,
  backgroundSize ,
  textDecoration ,
  background ,
  backgrounds ,
  gridTemplateColumns ,
  gridTemplateRows ,
  Calc ,
  size ,
  filter ,
  fontFace ,
  Transition ,
  transitionValue ,
  transitionList ,
  transition ,
  transitions ,
  keyframes ,
  Animation ,
  animationValue ,
  animation ,
  animations ,
  animationName ,
  SVG ,
  aliceblue ,
  antiquewhite ,
  aqua ,
  aquamarine ,
  azure ,
  beige ,
  bisque ,
  black ,
  blanchedalmond ,
  blue ,
  blueviolet ,
  brown ,
  burlywood ,
  cadetblue ,
  chartreuse ,
  chocolate ,
  coral ,
  cornflowerblue ,
  cornsilk ,
  crimson ,
  cyan ,
  darkblue ,
  darkcyan ,
  darkgoldenrod ,
  darkgray ,
  darkgrey ,
  darkgreen ,
  darkkhaki ,
  darkmagenta ,
  darkolivegreen ,
  darkorange ,
  darkorchid ,
  darkred ,
  darksalmon ,
  darkseagreen ,
  darkslateblue ,
  darkslategray ,
  darkslategrey ,
  darkturquoise ,
  darkviolet ,
  deeppink ,
  deepskyblue ,
  dimgray ,
  dimgrey ,
  dodgerblue ,
  firebrick ,
  floralwhite ,
  forestgreen ,
  fuchsia ,
  gainsboro ,
  ghostwhite ,
  gold ,
  goldenrod ,
  gray ,
  grey ,
  green ,
  greenyellow ,
  honeydew ,
  hotpink ,
  indianred ,
  indigo ,
  ivory ,
  khaki ,
  lavender ,
  lavenderblush ,
  lawngreen ,
  lemonchiffon ,
  lightblue ,
  lightcoral ,
  lightcyan ,
  lightgoldenrodyellow ,
  lightgray ,
  lightgrey ,
  lightgreen ,
  lightpink ,
  lightsalmon ,
  lightseagreen ,
  lightskyblue ,
  lightslategray ,
  lightslategrey ,
  lightsteelblue ,
  lightyellow ,
  lime ,
  limegreen ,
  linen ,
  magenta ,
  maroon ,
  mediumaquamarine ,
  mediumblue ,
  mediumorchid ,
  mediumpurple ,
  mediumseagreen ,
  mediumslateblue ,
  mediumspringgreen ,
  mediumturquoise ,
  mediumvioletred ,
  midnightblue ,
  mintcream ,
  mistyrose ,
  moccasin ,
  navajowhite ,
  navy ,
  oldlace ,
  olive ,
  olivedrab ,
  orange ,
  orangered ,
  orchid ,
  palegoldenrod ,
  palegreen ,
  paleturquoise ,
  palevioletred ,
  papayawhip ,
  peachpuff ,
  peru ,
  pink ,
  plum ,
  powderblue ,
  purple ,
  rebeccapurple ,
  red ,
  rosybrown ,
  royalblue ,
  saddlebrown ,
  salmon ,
  sandybrown ,
  seagreen ,
  seashell ,
  sienna ,
  silver ,
  skyblue ,
  slateblue ,
  slategray ,
  slategrey ,
  snow ,
  springgreen ,
  steelblue ,
  tan ,
  teal ,
  thistle ,
  tomato ,
  turquoise ,
  violet ,
  wheat ,
  white ,
  whitesmoke ,
  yellow ,
  yellowgreen ,
  
}
/* cache Not a pure module */
